// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module real_matmul_real_matmul_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_46_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem_AWVALID,
        m_axi_mem_AWREADY,
        m_axi_mem_AWADDR,
        m_axi_mem_AWID,
        m_axi_mem_AWLEN,
        m_axi_mem_AWSIZE,
        m_axi_mem_AWBURST,
        m_axi_mem_AWLOCK,
        m_axi_mem_AWCACHE,
        m_axi_mem_AWPROT,
        m_axi_mem_AWQOS,
        m_axi_mem_AWREGION,
        m_axi_mem_AWUSER,
        m_axi_mem_WVALID,
        m_axi_mem_WREADY,
        m_axi_mem_WDATA,
        m_axi_mem_WSTRB,
        m_axi_mem_WLAST,
        m_axi_mem_WID,
        m_axi_mem_WUSER,
        m_axi_mem_ARVALID,
        m_axi_mem_ARREADY,
        m_axi_mem_ARADDR,
        m_axi_mem_ARID,
        m_axi_mem_ARLEN,
        m_axi_mem_ARSIZE,
        m_axi_mem_ARBURST,
        m_axi_mem_ARLOCK,
        m_axi_mem_ARCACHE,
        m_axi_mem_ARPROT,
        m_axi_mem_ARQOS,
        m_axi_mem_ARREGION,
        m_axi_mem_ARUSER,
        m_axi_mem_RVALID,
        m_axi_mem_RREADY,
        m_axi_mem_RDATA,
        m_axi_mem_RLAST,
        m_axi_mem_RID,
        m_axi_mem_RFIFONUM,
        m_axi_mem_RUSER,
        m_axi_mem_RRESP,
        m_axi_mem_BVALID,
        m_axi_mem_BREADY,
        m_axi_mem_BRESP,
        m_axi_mem_BID,
        m_axi_mem_BUSER,
        rem_i_urem_cast,
        MatA_BRAM_address0,
        MatA_BRAM_ce0,
        MatA_BRAM_we0,
        MatA_BRAM_d0,
        MatB_BRAM_address0,
        MatB_BRAM_ce0,
        MatB_BRAM_we0,
        MatB_BRAM_d0,
        sext_ln45,
        MatB_DRAM
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem_AWVALID;
input   m_axi_mem_AWREADY;
output  [63:0] m_axi_mem_AWADDR;
output  [0:0] m_axi_mem_AWID;
output  [31:0] m_axi_mem_AWLEN;
output  [2:0] m_axi_mem_AWSIZE;
output  [1:0] m_axi_mem_AWBURST;
output  [1:0] m_axi_mem_AWLOCK;
output  [3:0] m_axi_mem_AWCACHE;
output  [2:0] m_axi_mem_AWPROT;
output  [3:0] m_axi_mem_AWQOS;
output  [3:0] m_axi_mem_AWREGION;
output  [0:0] m_axi_mem_AWUSER;
output   m_axi_mem_WVALID;
input   m_axi_mem_WREADY;
output  [15:0] m_axi_mem_WDATA;
output  [1:0] m_axi_mem_WSTRB;
output   m_axi_mem_WLAST;
output  [0:0] m_axi_mem_WID;
output  [0:0] m_axi_mem_WUSER;
output   m_axi_mem_ARVALID;
input   m_axi_mem_ARREADY;
output  [63:0] m_axi_mem_ARADDR;
output  [0:0] m_axi_mem_ARID;
output  [31:0] m_axi_mem_ARLEN;
output  [2:0] m_axi_mem_ARSIZE;
output  [1:0] m_axi_mem_ARBURST;
output  [1:0] m_axi_mem_ARLOCK;
output  [3:0] m_axi_mem_ARCACHE;
output  [2:0] m_axi_mem_ARPROT;
output  [3:0] m_axi_mem_ARQOS;
output  [3:0] m_axi_mem_ARREGION;
output  [0:0] m_axi_mem_ARUSER;
input   m_axi_mem_RVALID;
output   m_axi_mem_RREADY;
input  [15:0] m_axi_mem_RDATA;
input   m_axi_mem_RLAST;
input  [0:0] m_axi_mem_RID;
input  [9:0] m_axi_mem_RFIFONUM;
input  [0:0] m_axi_mem_RUSER;
input  [1:0] m_axi_mem_RRESP;
input   m_axi_mem_BVALID;
output   m_axi_mem_BREADY;
input  [1:0] m_axi_mem_BRESP;
input  [0:0] m_axi_mem_BID;
input  [0:0] m_axi_mem_BUSER;
input  [6:0] rem_i_urem_cast;
output  [8:0] MatA_BRAM_address0;
output   MatA_BRAM_ce0;
output   MatA_BRAM_we0;
output  [15:0] MatA_BRAM_d0;
output  [8:0] MatB_BRAM_address0;
output   MatB_BRAM_ce0;
output   MatB_BRAM_we0;
output  [15:0] MatB_BRAM_d0;
input  [62:0] sext_ln45;
input  [63:0] MatB_DRAM;

reg ap_idle;
reg m_axi_mem_ARVALID;
reg[63:0] m_axi_mem_ARADDR;
reg m_axi_mem_RREADY;
reg MatA_BRAM_ce0;
reg MatA_BRAM_we0;
reg MatB_BRAM_ce0;
reg MatB_BRAM_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
reg   [0:0] icmp_ln45_reg_451;
reg   [0:0] icmp_ln45_reg_451_pp0_iter1_reg;
reg    ap_block_state4_io;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_state10_pp0_stage1_iter4;
reg    ap_block_state12_pp0_stage1_iter5;
reg    ap_block_pp0_stage1_subdone;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mem_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    mem_blk_n_R;
wire    ap_block_pp0_stage1;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
reg    ap_block_state3_io;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
reg    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state13_pp0_stage0_iter6;
reg    ap_block_pp0_stage0_11001;
wire  signed [63:0] sext_ln45_cast_fu_168_p1;
reg  signed [63:0] sext_ln45_cast_reg_441;
wire   [0:0] empty_fu_193_p1;
reg   [0:0] empty_reg_446;
wire   [0:0] icmp_ln45_fu_197_p2;
reg   [0:0] icmp_ln45_reg_451_pp0_iter2_reg;
reg   [0:0] icmp_ln45_reg_451_pp0_iter3_reg;
reg   [0:0] icmp_ln45_reg_451_pp0_iter4_reg;
reg   [7:0] j_load_reg_455;
wire   [0:0] icmp_ln46_fu_218_p2;
reg   [0:0] icmp_ln46_reg_460;
wire   [1:0] select_ln45_1_fu_224_p3;
reg   [1:0] select_ln45_1_reg_466;
reg   [1:0] select_ln45_1_reg_466_pp0_iter1_reg;
reg   [1:0] select_ln45_1_reg_466_pp0_iter2_reg;
reg   [1:0] select_ln45_1_reg_466_pp0_iter3_reg;
reg   [1:0] select_ln45_1_reg_466_pp0_iter4_reg;
reg   [1:0] select_ln45_1_reg_466_pp0_iter5_reg;
wire   [9:0] mul_ln47_fu_236_p2;
reg   [9:0] mul_ln47_reg_471;
wire   [8:0] trunc_ln45_fu_242_p1;
reg   [8:0] trunc_ln45_reg_476;
reg   [8:0] trunc_ln45_reg_476_pp0_iter1_reg;
reg   [8:0] trunc_ln45_reg_476_pp0_iter2_reg;
reg   [8:0] trunc_ln45_reg_476_pp0_iter3_reg;
reg   [8:0] trunc_ln45_reg_476_pp0_iter4_reg;
reg   [8:0] trunc_ln45_reg_476_pp0_iter5_reg;
wire   [0:0] empty_27_fu_246_p1;
reg   [0:0] empty_27_reg_481;
wire   [7:0] select_ln45_fu_260_p3;
reg   [7:0] select_ln45_reg_486;
reg    ap_block_pp0_stage1_11001;
reg   [7:0] select_ln45_reg_486_pp0_iter1_reg;
reg   [7:0] select_ln45_reg_486_pp0_iter2_reg;
reg   [7:0] select_ln45_reg_486_pp0_iter3_reg;
reg   [7:0] select_ln45_reg_486_pp0_iter4_reg;
reg   [63:0] mem_addr_reg_492;
wire   [16:0] mul_ln48_fu_294_p2;
reg   [16:0] mul_ln48_reg_498;
reg   [63:0] mem_addr_1_reg_503;
reg   [15:0] mem_addr_read_reg_509;
wire   [8:0] add_ln48_3_fu_399_p2;
reg   [8:0] add_ln48_3_reg_514;
reg   [15:0] mem_addr_1_read_reg_519;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln47_3_fu_387_p1;
wire   [63:0] zext_ln48_fu_405_p1;
wire   [63:0] add_ln47_1_fu_282_p2;
wire  signed [63:0] sext_ln48_fu_366_p1;
reg   [7:0] j_fu_88;
wire   [7:0] add_ln46_fu_300_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_j_load;
reg   [1:0] i_fu_92;
reg   [1:0] ap_sig_allocacmp_i_2;
reg   [8:0] indvar_flatten_fu_96;
wire   [8:0] add_ln45_1_fu_203_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [1:0] add_ln45_fu_212_p2;
wire   [1:0] mul_ln47_fu_236_p0;
wire   [8:0] mul_ln47_fu_236_p1;
wire   [63:0] j_cast9_fu_269_p1;
wire   [63:0] add_ln47_fu_277_p2;
wire   [63:0] zext_ln45_fu_266_p1;
wire   [7:0] mul_ln48_fu_294_p0;
wire   [9:0] mul_ln48_fu_294_p1;
wire   [7:0] add_ln48_2_mid1_fu_317_p3;
wire   [7:0] add_ln48_2_fu_311_p3;
wire   [7:0] select_ln45_2_fu_323_p3;
wire   [8:0] zext_ln46_mid2_v_fu_330_p3;
wire   [63:0] zext_ln48_1_fu_342_p1;
wire   [63:0] add_ln48_fu_345_p2;
wire   [63:0] zext_ln45_1_fu_338_p1;
wire   [63:0] add_ln48_1_fu_350_p2;
wire   [62:0] trunc_ln1_fu_356_p4;
wire   [8:0] zext_ln47_2_fu_379_p1;
wire   [8:0] add_ln47_2_fu_382_p2;
wire   [8:0] tmp_1_fu_392_p3;
wire   [8:0] zext_ln47_fu_376_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter5_stage0;
reg    ap_idle_pp0_0to4;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to6;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [9:0] mul_ln47_fu_236_p00;
wire   [16:0] mul_ln48_fu_294_p00;
reg    ap_condition_256;
reg    ap_condition_512;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

real_matmul_mul_2ns_9ns_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 2 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 10 ))
mul_2ns_9ns_10_1_1_U1(
    .din0(mul_ln47_fu_236_p0),
    .din1(mul_ln47_fu_236_p1),
    .dout(mul_ln47_fu_236_p2)
);

real_matmul_mul_8ns_10ns_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 17 ))
mul_8ns_10ns_17_1_1_U2(
    .din0(mul_ln48_fu_294_p0),
    .din1(mul_ln48_fu_294_p1),
    .dout(mul_ln48_fu_294_p2)
);

real_matmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln45_fu_197_p2 == 1'd0))) begin
            i_fu_92 <= select_ln45_1_fu_224_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_92 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln45_fu_197_p2 == 1'd0))) begin
            indvar_flatten_fu_96 <= add_ln45_1_fu_203_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_96 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        j_fu_88 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln45_reg_451 == 1'd0))) begin
        j_fu_88 <= add_ln46_fu_300_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln48_3_reg_514 <= add_ln48_3_fu_399_p2;
        mem_addr_1_read_reg_519 <= m_axi_mem_RDATA;
        select_ln45_reg_486_pp0_iter1_reg <= select_ln45_reg_486;
        select_ln45_reg_486_pp0_iter2_reg <= select_ln45_reg_486_pp0_iter1_reg;
        select_ln45_reg_486_pp0_iter3_reg <= select_ln45_reg_486_pp0_iter2_reg;
        select_ln45_reg_486_pp0_iter4_reg <= select_ln45_reg_486_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln45_fu_197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_27_reg_481 <= empty_27_fu_246_p1;
        icmp_ln46_reg_460 <= icmp_ln46_fu_218_p2;
        j_load_reg_455 <= ap_sig_allocacmp_j_load;
        mul_ln47_reg_471 <= mul_ln47_fu_236_p2;
        select_ln45_1_reg_466 <= select_ln45_1_fu_224_p3;
        trunc_ln45_reg_476 <= trunc_ln45_fu_242_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_reg_446 <= empty_fu_193_p1;
        icmp_ln45_reg_451 <= icmp_ln45_fu_197_p2;
        icmp_ln45_reg_451_pp0_iter1_reg <= icmp_ln45_reg_451;
        icmp_ln45_reg_451_pp0_iter2_reg <= icmp_ln45_reg_451_pp0_iter1_reg;
        icmp_ln45_reg_451_pp0_iter3_reg <= icmp_ln45_reg_451_pp0_iter2_reg;
        icmp_ln45_reg_451_pp0_iter4_reg <= icmp_ln45_reg_451_pp0_iter3_reg;
        mem_addr_read_reg_509 <= m_axi_mem_RDATA;
        select_ln45_1_reg_466_pp0_iter1_reg <= select_ln45_1_reg_466;
        select_ln45_1_reg_466_pp0_iter2_reg <= select_ln45_1_reg_466_pp0_iter1_reg;
        select_ln45_1_reg_466_pp0_iter3_reg <= select_ln45_1_reg_466_pp0_iter2_reg;
        select_ln45_1_reg_466_pp0_iter4_reg <= select_ln45_1_reg_466_pp0_iter3_reg;
        select_ln45_1_reg_466_pp0_iter5_reg <= select_ln45_1_reg_466_pp0_iter4_reg;
        sext_ln45_cast_reg_441 <= sext_ln45_cast_fu_168_p1;
        trunc_ln45_reg_476_pp0_iter1_reg <= trunc_ln45_reg_476;
        trunc_ln45_reg_476_pp0_iter2_reg <= trunc_ln45_reg_476_pp0_iter1_reg;
        trunc_ln45_reg_476_pp0_iter3_reg <= trunc_ln45_reg_476_pp0_iter2_reg;
        trunc_ln45_reg_476_pp0_iter4_reg <= trunc_ln45_reg_476_pp0_iter3_reg;
        trunc_ln45_reg_476_pp0_iter5_reg <= trunc_ln45_reg_476_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_451 == 1'd0))) begin
        mem_addr_1_reg_503 <= sext_ln48_fu_366_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln45_reg_451 == 1'd0))) begin
        mem_addr_reg_492 <= add_ln47_1_fu_282_p2;
        mul_ln48_reg_498 <= mul_ln48_fu_294_p2;
        select_ln45_reg_486 <= select_ln45_fu_260_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        MatA_BRAM_ce0 = 1'b1;
    end else begin
        MatA_BRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        MatA_BRAM_we0 = 1'b1;
    end else begin
        MatA_BRAM_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_BRAM_ce0 = 1'b1;
    end else begin
        MatB_BRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_BRAM_we0 = 1'b1;
    end else begin
        MatB_BRAM_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (icmp_ln45_reg_451 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln45_reg_451 == 1'd1))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln45_reg_451_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter5_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to6 = 1'b1;
    end else begin
        ap_idle_pp0_1to6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_92;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_96;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 8'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_88;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if ((1'b1 == ap_condition_512)) begin
            m_axi_mem_ARADDR = mem_addr_1_reg_503;
        end else if ((1'b1 == ap_condition_256)) begin
            m_axi_mem_ARADDR = mem_addr_reg_492;
        end else begin
            m_axi_mem_ARADDR = 'bx;
        end
    end else begin
        m_axi_mem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln45_reg_451_pp0_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_451 == 1'd0)))) begin
        m_axi_mem_ARVALID = 1'b1;
    end else begin
        m_axi_mem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axi_mem_RREADY = 1'b1;
    end else begin
        m_axi_mem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1) & (icmp_ln45_reg_451_pp0_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln45_reg_451 == 1'd0)))) begin
        mem_blk_n_AR = m_axi_mem_ARREADY;
    end else begin
        mem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        mem_blk_n_R = m_axi_mem_RVALID;
    end else begin
        mem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_idle_pp0_0to4 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter5_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to6 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MatA_BRAM_address0 = zext_ln47_3_fu_387_p1;

assign MatA_BRAM_d0 = mem_addr_read_reg_509;

assign MatB_BRAM_address0 = zext_ln48_fu_405_p1;

assign MatB_BRAM_d0 = mem_addr_1_read_reg_519;

assign add_ln45_1_fu_203_p2 = (ap_sig_allocacmp_indvar_flatten_load + 9'd1);

assign add_ln45_fu_212_p2 = (ap_sig_allocacmp_i_2 + 2'd1);

assign add_ln46_fu_300_p2 = (select_ln45_fu_260_p3 + 8'd1);

assign add_ln47_1_fu_282_p2 = (add_ln47_fu_277_p2 + zext_ln45_fu_266_p1);

assign add_ln47_2_fu_382_p2 = (trunc_ln45_reg_476_pp0_iter5_reg + zext_ln47_2_fu_379_p1);

assign add_ln47_fu_277_p2 = ($signed(j_cast9_fu_269_p1) + $signed(sext_ln45_cast_reg_441));

assign add_ln48_1_fu_350_p2 = (add_ln48_fu_345_p2 + zext_ln45_1_fu_338_p1);

assign add_ln48_2_fu_311_p3 = {{rem_i_urem_cast}, {empty_reg_446}};

assign add_ln48_2_mid1_fu_317_p3 = {{rem_i_urem_cast}, {empty_27_reg_481}};

assign add_ln48_3_fu_399_p2 = (tmp_1_fu_392_p3 + zext_ln47_fu_376_p1);

assign add_ln48_fu_345_p2 = (zext_ln48_1_fu_342_p1 + MatB_DRAM);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((m_axi_mem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((m_axi_mem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((m_axi_mem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((m_axi_mem_RVALID == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

assign ap_block_state10_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter5 = (m_axi_mem_RVALID == 1'b0);
end

always @ (*) begin
    ap_block_state12_pp0_stage1_iter5 = (m_axi_mem_RVALID == 1'b0);
end

assign ap_block_state13_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_mem_ARREADY == 1'b0) & (icmp_ln45_reg_451 == 1'd0));
end

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((m_axi_mem_ARREADY == 1'b0) & (icmp_ln45_reg_451_pp0_iter1_reg == 1'd0));
end

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_256 = ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln45_reg_451 == 1'd0));
end

always @ (*) begin
    ap_condition_512 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln45_reg_451_pp0_iter1_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign empty_27_fu_246_p1 = add_ln45_fu_212_p2[0:0];

assign empty_fu_193_p1 = ap_sig_allocacmp_i_2[0:0];

assign icmp_ln45_fu_197_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 9'd300) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_218_p2 = ((ap_sig_allocacmp_j_load == 8'd150) ? 1'b1 : 1'b0);

assign j_cast9_fu_269_p1 = select_ln45_fu_260_p3;

assign m_axi_mem_ARBURST = 2'd0;

assign m_axi_mem_ARCACHE = 4'd0;

assign m_axi_mem_ARID = 1'd0;

assign m_axi_mem_ARLEN = 32'd1;

assign m_axi_mem_ARLOCK = 2'd0;

assign m_axi_mem_ARPROT = 3'd0;

assign m_axi_mem_ARQOS = 4'd0;

assign m_axi_mem_ARREGION = 4'd0;

assign m_axi_mem_ARSIZE = 3'd0;

assign m_axi_mem_ARUSER = 1'd0;

assign m_axi_mem_AWADDR = 64'd0;

assign m_axi_mem_AWBURST = 2'd0;

assign m_axi_mem_AWCACHE = 4'd0;

assign m_axi_mem_AWID = 1'd0;

assign m_axi_mem_AWLEN = 32'd0;

assign m_axi_mem_AWLOCK = 2'd0;

assign m_axi_mem_AWPROT = 3'd0;

assign m_axi_mem_AWQOS = 4'd0;

assign m_axi_mem_AWREGION = 4'd0;

assign m_axi_mem_AWSIZE = 3'd0;

assign m_axi_mem_AWUSER = 1'd0;

assign m_axi_mem_AWVALID = 1'b0;

assign m_axi_mem_BREADY = 1'b0;

assign m_axi_mem_WDATA = 16'd0;

assign m_axi_mem_WID = 1'd0;

assign m_axi_mem_WLAST = 1'b0;

assign m_axi_mem_WSTRB = 2'd0;

assign m_axi_mem_WUSER = 1'd0;

assign m_axi_mem_WVALID = 1'b0;

assign mul_ln47_fu_236_p0 = mul_ln47_fu_236_p00;

assign mul_ln47_fu_236_p00 = select_ln45_1_fu_224_p3;

assign mul_ln47_fu_236_p1 = 10'd150;

assign mul_ln48_fu_294_p0 = mul_ln48_fu_294_p00;

assign mul_ln48_fu_294_p00 = select_ln45_fu_260_p3;

assign mul_ln48_fu_294_p1 = 17'd400;

assign select_ln45_1_fu_224_p3 = ((icmp_ln46_fu_218_p2[0:0] == 1'b1) ? add_ln45_fu_212_p2 : ap_sig_allocacmp_i_2);

assign select_ln45_2_fu_323_p3 = ((icmp_ln46_reg_460[0:0] == 1'b1) ? add_ln48_2_mid1_fu_317_p3 : add_ln48_2_fu_311_p3);

assign select_ln45_fu_260_p3 = ((icmp_ln46_reg_460[0:0] == 1'b1) ? 8'd0 : j_load_reg_455);

assign sext_ln45_cast_fu_168_p1 = $signed(sext_ln45);

assign sext_ln48_fu_366_p1 = $signed(trunc_ln1_fu_356_p4);

assign tmp_1_fu_392_p3 = {{select_ln45_reg_486_pp0_iter4_reg}, {1'd0}};

assign trunc_ln1_fu_356_p4 = {{add_ln48_1_fu_350_p2[63:1]}};

assign trunc_ln45_fu_242_p1 = mul_ln47_fu_236_p2[8:0];

assign zext_ln45_1_fu_338_p1 = zext_ln46_mid2_v_fu_330_p3;

assign zext_ln45_fu_266_p1 = mul_ln47_reg_471;

assign zext_ln46_mid2_v_fu_330_p3 = {{select_ln45_2_fu_323_p3}, {1'd0}};

assign zext_ln47_2_fu_379_p1 = select_ln45_reg_486_pp0_iter4_reg;

assign zext_ln47_3_fu_387_p1 = add_ln47_2_fu_382_p2;

assign zext_ln47_fu_376_p1 = select_ln45_1_reg_466_pp0_iter5_reg;

assign zext_ln48_1_fu_342_p1 = mul_ln48_reg_498;

assign zext_ln48_fu_405_p1 = add_ln48_3_reg_514;

endmodule //real_matmul_real_matmul_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_46_2
