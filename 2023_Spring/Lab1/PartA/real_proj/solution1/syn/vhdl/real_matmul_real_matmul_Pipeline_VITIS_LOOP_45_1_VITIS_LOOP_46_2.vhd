-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity real_matmul_real_matmul_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_46_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem_AWVALID : OUT STD_LOGIC;
    m_axi_mem_AWREADY : IN STD_LOGIC;
    m_axi_mem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WVALID : OUT STD_LOGIC;
    m_axi_mem_WREADY : IN STD_LOGIC;
    m_axi_mem_WDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_mem_WSTRB : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_WLAST : OUT STD_LOGIC;
    m_axi_mem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARVALID : OUT STD_LOGIC;
    m_axi_mem_ARREADY : IN STD_LOGIC;
    m_axi_mem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RVALID : IN STD_LOGIC;
    m_axi_mem_RREADY : OUT STD_LOGIC;
    m_axi_mem_RDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    m_axi_mem_RLAST : IN STD_LOGIC;
    m_axi_mem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RFIFONUM : IN STD_LOGIC_VECTOR (9 downto 0);
    m_axi_mem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BVALID : IN STD_LOGIC;
    m_axi_mem_BREADY : OUT STD_LOGIC;
    m_axi_mem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    rem_i_urem_cast : IN STD_LOGIC_VECTOR (6 downto 0);
    MatA_BRAM_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    MatA_BRAM_ce0 : OUT STD_LOGIC;
    MatA_BRAM_we0 : OUT STD_LOGIC;
    MatA_BRAM_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    MatB_BRAM_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    MatB_BRAM_ce0 : OUT STD_LOGIC;
    MatB_BRAM_we0 : OUT STD_LOGIC;
    MatB_BRAM_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sext_ln45 : IN STD_LOGIC_VECTOR (62 downto 0);
    MatB_DRAM : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of real_matmul_real_matmul_Pipeline_VITIS_LOOP_45_1_VITIS_LOOP_46_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv10_96 : STD_LOGIC_VECTOR (9 downto 0) := "0010010110";
    constant ap_const_lv17_190 : STD_LOGIC_VECTOR (16 downto 0) := "00000000110010000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal icmp_ln45_reg_451 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_451_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mem_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mem_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln45_cast_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln45_cast_reg_441 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_fu_193_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_446 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_451_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_451_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_451_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_load_reg_455 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln46_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_460 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln45_1_fu_224_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln45_1_reg_466 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln45_1_reg_466_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln45_1_reg_466_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln45_1_reg_466_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln45_1_reg_466_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln45_1_reg_466_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln47_fu_236_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln47_reg_471 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln45_fu_242_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln45_reg_476 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln45_reg_476_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln45_reg_476_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln45_reg_476_pp0_iter3_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln45_reg_476_pp0_iter4_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln45_reg_476_pp0_iter5_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_27_fu_246_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_27_reg_481 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln45_fu_260_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln45_reg_486 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln45_reg_486_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln45_reg_486_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln45_reg_486_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln45_reg_486_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_addr_reg_492 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln48_fu_294_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln48_reg_498 : STD_LOGIC_VECTOR (16 downto 0);
    signal mem_addr_1_reg_503 : STD_LOGIC_VECTOR (63 downto 0);
    signal mem_addr_read_reg_509 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln48_3_fu_399_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln48_3_reg_514 : STD_LOGIC_VECTOR (8 downto 0);
    signal mem_addr_1_read_reg_519 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal zext_ln47_3_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln47_1_fu_282_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln48_fu_366_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_88 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln46_fu_300_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (7 downto 0);
    signal i_fu_92 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_fu_96 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln45_1_fu_203_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln45_fu_212_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln47_fu_236_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal mul_ln47_fu_236_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_cast9_fu_269_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln47_fu_277_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_fu_266_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln48_fu_294_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln48_fu_294_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_2_mid1_fu_317_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln48_2_fu_311_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln45_2_fu_323_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln46_mid2_v_fu_330_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln48_1_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln48_fu_345_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln45_1_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln48_1_fu_350_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_356_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln47_2_fu_379_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln47_2_fu_382_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_392_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln47_fu_376_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter5_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to6 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal mul_ln47_fu_236_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln48_fu_294_p00 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_condition_256 : BOOLEAN;
    signal ap_condition_512 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component real_matmul_mul_2ns_9ns_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component real_matmul_mul_8ns_10ns_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component real_matmul_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_2ns_9ns_10_1_1_U1 : component real_matmul_mul_2ns_9ns_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 9,
        dout_WIDTH => 10)
    port map (
        din0 => mul_ln47_fu_236_p0,
        din1 => mul_ln47_fu_236_p1,
        dout => mul_ln47_fu_236_p2);

    mul_8ns_10ns_17_1_1_U2 : component real_matmul_mul_8ns_10ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        dout_WIDTH => 17)
    port map (
        din0 => mul_ln48_fu_294_p0,
        din1 => mul_ln48_fu_294_p1,
        dout => mul_ln48_fu_294_p2);

    flow_control_loop_pipe_sequential_init_U : component real_matmul_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    i_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln45_fu_197_p2 = ap_const_lv1_0))) then 
                    i_fu_92 <= select_ln45_1_fu_224_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_92 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln45_fu_197_p2 = ap_const_lv1_0))) then 
                    indvar_flatten_fu_96 <= add_ln45_1_fu_203_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_96 <= ap_const_lv9_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                j_fu_88 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln45_reg_451 = ap_const_lv1_0))) then 
                j_fu_88 <= add_ln46_fu_300_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln48_3_reg_514 <= add_ln48_3_fu_399_p2;
                mem_addr_1_read_reg_519 <= m_axi_mem_RDATA;
                select_ln45_reg_486_pp0_iter1_reg <= select_ln45_reg_486;
                select_ln45_reg_486_pp0_iter2_reg <= select_ln45_reg_486_pp0_iter1_reg;
                select_ln45_reg_486_pp0_iter3_reg <= select_ln45_reg_486_pp0_iter2_reg;
                select_ln45_reg_486_pp0_iter4_reg <= select_ln45_reg_486_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln45_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_27_reg_481 <= empty_27_fu_246_p1;
                icmp_ln46_reg_460 <= icmp_ln46_fu_218_p2;
                j_load_reg_455 <= ap_sig_allocacmp_j_load;
                mul_ln47_reg_471 <= mul_ln47_fu_236_p2;
                select_ln45_1_reg_466 <= select_ln45_1_fu_224_p3;
                trunc_ln45_reg_476 <= trunc_ln45_fu_242_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                empty_reg_446 <= empty_fu_193_p1;
                icmp_ln45_reg_451 <= icmp_ln45_fu_197_p2;
                icmp_ln45_reg_451_pp0_iter1_reg <= icmp_ln45_reg_451;
                icmp_ln45_reg_451_pp0_iter2_reg <= icmp_ln45_reg_451_pp0_iter1_reg;
                icmp_ln45_reg_451_pp0_iter3_reg <= icmp_ln45_reg_451_pp0_iter2_reg;
                icmp_ln45_reg_451_pp0_iter4_reg <= icmp_ln45_reg_451_pp0_iter3_reg;
                mem_addr_read_reg_509 <= m_axi_mem_RDATA;
                select_ln45_1_reg_466_pp0_iter1_reg <= select_ln45_1_reg_466;
                select_ln45_1_reg_466_pp0_iter2_reg <= select_ln45_1_reg_466_pp0_iter1_reg;
                select_ln45_1_reg_466_pp0_iter3_reg <= select_ln45_1_reg_466_pp0_iter2_reg;
                select_ln45_1_reg_466_pp0_iter4_reg <= select_ln45_1_reg_466_pp0_iter3_reg;
                select_ln45_1_reg_466_pp0_iter5_reg <= select_ln45_1_reg_466_pp0_iter4_reg;
                sext_ln45_cast_reg_441 <= sext_ln45_cast_fu_168_p1;
                trunc_ln45_reg_476_pp0_iter1_reg <= trunc_ln45_reg_476;
                trunc_ln45_reg_476_pp0_iter2_reg <= trunc_ln45_reg_476_pp0_iter1_reg;
                trunc_ln45_reg_476_pp0_iter3_reg <= trunc_ln45_reg_476_pp0_iter2_reg;
                trunc_ln45_reg_476_pp0_iter4_reg <= trunc_ln45_reg_476_pp0_iter3_reg;
                trunc_ln45_reg_476_pp0_iter5_reg <= trunc_ln45_reg_476_pp0_iter4_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_451 = ap_const_lv1_0))) then
                mem_addr_1_reg_503 <= sext_ln48_fu_366_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln45_reg_451 = ap_const_lv1_0))) then
                mem_addr_reg_492 <= add_ln47_1_fu_282_p2;
                mul_ln48_reg_498 <= mul_ln48_fu_294_p2;
                select_ln45_reg_486 <= select_ln45_fu_260_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter5_stage0, ap_idle_pp0_0to4, ap_idle_pp0_1to6, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to6 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    MatA_BRAM_address0 <= zext_ln47_3_fu_387_p1(9 - 1 downto 0);

    MatA_BRAM_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            MatA_BRAM_ce0 <= ap_const_logic_1;
        else 
            MatA_BRAM_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatA_BRAM_d0 <= mem_addr_read_reg_509;

    MatA_BRAM_we0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            MatA_BRAM_we0 <= ap_const_logic_1;
        else 
            MatA_BRAM_we0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_BRAM_address0 <= zext_ln48_fu_405_p1(9 - 1 downto 0);

    MatB_BRAM_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_BRAM_ce0 <= ap_const_logic_1;
        else 
            MatB_BRAM_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    MatB_BRAM_d0 <= mem_addr_1_read_reg_519;

    MatB_BRAM_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            MatB_BRAM_we0 <= ap_const_logic_1;
        else 
            MatB_BRAM_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln45_1_fu_203_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv9_1));
    add_ln45_fu_212_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv2_1));
    add_ln46_fu_300_p2 <= std_logic_vector(unsigned(select_ln45_fu_260_p3) + unsigned(ap_const_lv8_1));
    add_ln47_1_fu_282_p2 <= std_logic_vector(unsigned(add_ln47_fu_277_p2) + unsigned(zext_ln45_fu_266_p1));
    add_ln47_2_fu_382_p2 <= std_logic_vector(unsigned(trunc_ln45_reg_476_pp0_iter5_reg) + unsigned(zext_ln47_2_fu_379_p1));
    add_ln47_fu_277_p2 <= std_logic_vector(unsigned(j_cast9_fu_269_p1) + unsigned(sext_ln45_cast_reg_441));
    add_ln48_1_fu_350_p2 <= std_logic_vector(unsigned(add_ln48_fu_345_p2) + unsigned(zext_ln45_1_fu_338_p1));
    add_ln48_2_fu_311_p3 <= (rem_i_urem_cast & empty_reg_446);
    add_ln48_2_mid1_fu_317_p3 <= (rem_i_urem_cast & empty_27_reg_481);
    add_ln48_3_fu_399_p2 <= std_logic_vector(unsigned(tmp_1_fu_392_p3) + unsigned(zext_ln47_fu_376_p1));
    add_ln48_fu_345_p2 <= std_logic_vector(unsigned(zext_ln48_1_fu_342_p1) + unsigned(MatB_DRAM));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, m_axi_mem_RVALID, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((m_axi_mem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, m_axi_mem_RVALID, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((m_axi_mem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, m_axi_mem_RVALID, ap_block_state4_io)
    begin
                ap_block_pp0_stage1_11001 <= (((m_axi_mem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, m_axi_mem_RVALID, ap_block_state4_io)
    begin
                ap_block_pp0_stage1_subdone <= (((m_axi_mem_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;

        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state11_pp0_stage0_iter5_assign_proc : process(m_axi_mem_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter5 <= (m_axi_mem_RVALID = ap_const_logic_0);
    end process;


    ap_block_state12_pp0_stage1_iter5_assign_proc : process(m_axi_mem_RVALID)
    begin
                ap_block_state12_pp0_stage1_iter5 <= (m_axi_mem_RVALID = ap_const_logic_0);
    end process;

        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_io_assign_proc : process(m_axi_mem_ARREADY, icmp_ln45_reg_451)
    begin
                ap_block_state3_io <= ((m_axi_mem_ARREADY = ap_const_logic_0) and (icmp_ln45_reg_451 = ap_const_lv1_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(m_axi_mem_ARREADY, icmp_ln45_reg_451_pp0_iter1_reg)
    begin
                ap_block_state4_io <= ((m_axi_mem_ARREADY = ap_const_logic_0) and (icmp_ln45_reg_451_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_256_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln45_reg_451, ap_block_pp0_stage0_11001)
    begin
                ap_condition_256 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_451 = ap_const_lv1_0));
    end process;


    ap_condition_512_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln45_reg_451_pp0_iter1_reg, ap_block_pp0_stage1_11001)
    begin
                ap_condition_512 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln45_reg_451_pp0_iter1_reg = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, icmp_ln45_reg_451, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln45_reg_451 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln45_reg_451, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln45_reg_451 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter5_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, icmp_ln45_reg_451_pp0_iter4_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln45_reg_451_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter5_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to6 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_92)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_92;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_96)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv9_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_88, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_88;
        end if; 
    end process;

    empty_27_fu_246_p1 <= add_ln45_fu_212_p2(1 - 1 downto 0);
    empty_fu_193_p1 <= ap_sig_allocacmp_i_2(1 - 1 downto 0);
    icmp_ln45_fu_197_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv9_12C) else "0";
    icmp_ln46_fu_218_p2 <= "1" when (ap_sig_allocacmp_j_load = ap_const_lv8_96) else "0";
    j_cast9_fu_269_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_fu_260_p3),64));

    m_axi_mem_ARADDR_assign_proc : process(ap_enable_reg_pp0_iter1, mem_addr_reg_492, mem_addr_1_reg_503, ap_condition_256, ap_condition_512)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if ((ap_const_boolean_1 = ap_condition_512)) then 
                m_axi_mem_ARADDR <= mem_addr_1_reg_503;
            elsif ((ap_const_boolean_1 = ap_condition_256)) then 
                m_axi_mem_ARADDR <= mem_addr_reg_492;
            else 
                m_axi_mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_mem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_mem_ARBURST <= ap_const_lv2_0;
    m_axi_mem_ARCACHE <= ap_const_lv4_0;
    m_axi_mem_ARID <= ap_const_lv1_0;
    m_axi_mem_ARLEN <= ap_const_lv32_1;
    m_axi_mem_ARLOCK <= ap_const_lv2_0;
    m_axi_mem_ARPROT <= ap_const_lv3_0;
    m_axi_mem_ARQOS <= ap_const_lv4_0;
    m_axi_mem_ARREGION <= ap_const_lv4_0;
    m_axi_mem_ARSIZE <= ap_const_lv3_0;
    m_axi_mem_ARUSER <= ap_const_lv1_0;

    m_axi_mem_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, icmp_ln45_reg_451, icmp_ln45_reg_451_pp0_iter1_reg, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln45_reg_451_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln45_reg_451 = ap_const_lv1_0)))) then 
            m_axi_mem_ARVALID <= ap_const_logic_1;
        else 
            m_axi_mem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_AWADDR <= ap_const_lv64_0;
    m_axi_mem_AWBURST <= ap_const_lv2_0;
    m_axi_mem_AWCACHE <= ap_const_lv4_0;
    m_axi_mem_AWID <= ap_const_lv1_0;
    m_axi_mem_AWLEN <= ap_const_lv32_0;
    m_axi_mem_AWLOCK <= ap_const_lv2_0;
    m_axi_mem_AWPROT <= ap_const_lv3_0;
    m_axi_mem_AWQOS <= ap_const_lv4_0;
    m_axi_mem_AWREGION <= ap_const_lv4_0;
    m_axi_mem_AWSIZE <= ap_const_lv3_0;
    m_axi_mem_AWUSER <= ap_const_lv1_0;
    m_axi_mem_AWVALID <= ap_const_logic_0;
    m_axi_mem_BREADY <= ap_const_logic_0;

    m_axi_mem_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            m_axi_mem_RREADY <= ap_const_logic_1;
        else 
            m_axi_mem_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem_WDATA <= ap_const_lv16_0;
    m_axi_mem_WID <= ap_const_lv1_0;
    m_axi_mem_WLAST <= ap_const_logic_0;
    m_axi_mem_WSTRB <= ap_const_lv2_0;
    m_axi_mem_WUSER <= ap_const_lv1_0;
    m_axi_mem_WVALID <= ap_const_logic_0;

    mem_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, m_axi_mem_ARREADY, icmp_ln45_reg_451, icmp_ln45_reg_451_pp0_iter1_reg, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (icmp_ln45_reg_451_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln45_reg_451 = ap_const_lv1_0)))) then 
            mem_blk_n_AR <= m_axi_mem_ARREADY;
        else 
            mem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage1, m_axi_mem_RVALID, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            mem_blk_n_R <= m_axi_mem_RVALID;
        else 
            mem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    mul_ln47_fu_236_p0 <= mul_ln47_fu_236_p00(2 - 1 downto 0);
    mul_ln47_fu_236_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_1_fu_224_p3),10));
    mul_ln47_fu_236_p1 <= ap_const_lv10_96(9 - 1 downto 0);
    mul_ln48_fu_294_p0 <= mul_ln48_fu_294_p00(8 - 1 downto 0);
    mul_ln48_fu_294_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_fu_260_p3),17));
    mul_ln48_fu_294_p1 <= ap_const_lv17_190(10 - 1 downto 0);
    select_ln45_1_fu_224_p3 <= 
        add_ln45_fu_212_p2 when (icmp_ln46_fu_218_p2(0) = '1') else 
        ap_sig_allocacmp_i_2;
    select_ln45_2_fu_323_p3 <= 
        add_ln48_2_mid1_fu_317_p3 when (icmp_ln46_reg_460(0) = '1') else 
        add_ln48_2_fu_311_p3;
    select_ln45_fu_260_p3 <= 
        ap_const_lv8_0 when (icmp_ln46_reg_460(0) = '1') else 
        j_load_reg_455;
        sext_ln45_cast_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln45),64));

        sext_ln48_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_356_p4),64));

    tmp_1_fu_392_p3 <= (select_ln45_reg_486_pp0_iter4_reg & ap_const_lv1_0);
    trunc_ln1_fu_356_p4 <= add_ln48_1_fu_350_p2(63 downto 1);
    trunc_ln45_fu_242_p1 <= mul_ln47_fu_236_p2(9 - 1 downto 0);
    zext_ln45_1_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln46_mid2_v_fu_330_p3),64));
    zext_ln45_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln47_reg_471),64));
    zext_ln46_mid2_v_fu_330_p3 <= (select_ln45_2_fu_323_p3 & ap_const_lv1_0);
    zext_ln47_2_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_reg_486_pp0_iter4_reg),9));
    zext_ln47_3_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln47_2_fu_382_p2),64));
    zext_ln47_fu_376_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln45_1_reg_466_pp0_iter5_reg),9));
    zext_ln48_1_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln48_reg_498),64));
    zext_ln48_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln48_3_reg_514),64));
end behav;
