// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module real_matmul_LoadMatricesFromDRAMToBRAM_Pipeline_LoadMatAFromDRAMtoBRAM_VITIS_LOOP_52_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_MatA_AWVALID,
        m_axi_MatA_AWREADY,
        m_axi_MatA_AWADDR,
        m_axi_MatA_AWID,
        m_axi_MatA_AWLEN,
        m_axi_MatA_AWSIZE,
        m_axi_MatA_AWBURST,
        m_axi_MatA_AWLOCK,
        m_axi_MatA_AWCACHE,
        m_axi_MatA_AWPROT,
        m_axi_MatA_AWQOS,
        m_axi_MatA_AWREGION,
        m_axi_MatA_AWUSER,
        m_axi_MatA_WVALID,
        m_axi_MatA_WREADY,
        m_axi_MatA_WDATA,
        m_axi_MatA_WSTRB,
        m_axi_MatA_WLAST,
        m_axi_MatA_WID,
        m_axi_MatA_WUSER,
        m_axi_MatA_ARVALID,
        m_axi_MatA_ARREADY,
        m_axi_MatA_ARADDR,
        m_axi_MatA_ARID,
        m_axi_MatA_ARLEN,
        m_axi_MatA_ARSIZE,
        m_axi_MatA_ARBURST,
        m_axi_MatA_ARLOCK,
        m_axi_MatA_ARCACHE,
        m_axi_MatA_ARPROT,
        m_axi_MatA_ARQOS,
        m_axi_MatA_ARREGION,
        m_axi_MatA_ARUSER,
        m_axi_MatA_RVALID,
        m_axi_MatA_RREADY,
        m_axi_MatA_RDATA,
        m_axi_MatA_RLAST,
        m_axi_MatA_RID,
        m_axi_MatA_RFIFONUM,
        m_axi_MatA_RUSER,
        m_axi_MatA_RRESP,
        m_axi_MatA_BVALID,
        m_axi_MatA_BREADY,
        m_axi_MatA_BRESP,
        m_axi_MatA_BID,
        m_axi_MatA_BUSER,
        sext_ln51,
        MatA_BRAM_3_address0,
        MatA_BRAM_3_ce0,
        MatA_BRAM_3_we0,
        MatA_BRAM_3_d0,
        MatA_BRAM_2_address0,
        MatA_BRAM_2_ce0,
        MatA_BRAM_2_we0,
        MatA_BRAM_2_d0,
        MatA_BRAM_1_address0,
        MatA_BRAM_1_ce0,
        MatA_BRAM_1_we0,
        MatA_BRAM_1_d0,
        MatA_BRAM_0_address0,
        MatA_BRAM_0_ce0,
        MatA_BRAM_0_we0,
        MatA_BRAM_0_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_MatA_AWVALID;
input   m_axi_MatA_AWREADY;
output  [63:0] m_axi_MatA_AWADDR;
output  [0:0] m_axi_MatA_AWID;
output  [31:0] m_axi_MatA_AWLEN;
output  [2:0] m_axi_MatA_AWSIZE;
output  [1:0] m_axi_MatA_AWBURST;
output  [1:0] m_axi_MatA_AWLOCK;
output  [3:0] m_axi_MatA_AWCACHE;
output  [2:0] m_axi_MatA_AWPROT;
output  [3:0] m_axi_MatA_AWQOS;
output  [3:0] m_axi_MatA_AWREGION;
output  [0:0] m_axi_MatA_AWUSER;
output   m_axi_MatA_WVALID;
input   m_axi_MatA_WREADY;
output  [15:0] m_axi_MatA_WDATA;
output  [1:0] m_axi_MatA_WSTRB;
output   m_axi_MatA_WLAST;
output  [0:0] m_axi_MatA_WID;
output  [0:0] m_axi_MatA_WUSER;
output   m_axi_MatA_ARVALID;
input   m_axi_MatA_ARREADY;
output  [63:0] m_axi_MatA_ARADDR;
output  [0:0] m_axi_MatA_ARID;
output  [31:0] m_axi_MatA_ARLEN;
output  [2:0] m_axi_MatA_ARSIZE;
output  [1:0] m_axi_MatA_ARBURST;
output  [1:0] m_axi_MatA_ARLOCK;
output  [3:0] m_axi_MatA_ARCACHE;
output  [2:0] m_axi_MatA_ARPROT;
output  [3:0] m_axi_MatA_ARQOS;
output  [3:0] m_axi_MatA_ARREGION;
output  [0:0] m_axi_MatA_ARUSER;
input   m_axi_MatA_RVALID;
output   m_axi_MatA_RREADY;
input  [15:0] m_axi_MatA_RDATA;
input   m_axi_MatA_RLAST;
input  [0:0] m_axi_MatA_RID;
input  [9:0] m_axi_MatA_RFIFONUM;
input  [0:0] m_axi_MatA_RUSER;
input  [1:0] m_axi_MatA_RRESP;
input   m_axi_MatA_BVALID;
output   m_axi_MatA_BREADY;
input  [1:0] m_axi_MatA_BRESP;
input  [0:0] m_axi_MatA_BID;
input  [0:0] m_axi_MatA_BUSER;
input  [62:0] sext_ln51;
output  [7:0] MatA_BRAM_3_address0;
output   MatA_BRAM_3_ce0;
output   MatA_BRAM_3_we0;
output  [15:0] MatA_BRAM_3_d0;
output  [7:0] MatA_BRAM_2_address0;
output   MatA_BRAM_2_ce0;
output   MatA_BRAM_2_we0;
output  [15:0] MatA_BRAM_2_d0;
output  [7:0] MatA_BRAM_1_address0;
output   MatA_BRAM_1_ce0;
output   MatA_BRAM_1_we0;
output  [15:0] MatA_BRAM_1_d0;
output  [7:0] MatA_BRAM_0_address0;
output   MatA_BRAM_0_ce0;
output   MatA_BRAM_0_we0;
output  [15:0] MatA_BRAM_0_d0;

reg ap_idle;
reg m_axi_MatA_RREADY;
reg MatA_BRAM_3_ce0;
reg MatA_BRAM_3_we0;
reg MatA_BRAM_2_ce0;
reg MatA_BRAM_2_we0;
reg MatA_BRAM_1_ce0;
reg MatA_BRAM_1_we0;
reg MatA_BRAM_0_ce0;
reg MatA_BRAM_0_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln51_fu_173_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    MatA_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] select_ln48_fu_208_p3;
reg   [7:0] select_ln48_reg_281;
wire   [1:0] trunc_ln48_fu_224_p1;
reg   [1:0] trunc_ln48_reg_286;
reg   [15:0] MatA_addr_read_reg_290;
wire   [63:0] zext_ln52_fu_244_p1;
reg   [7:0] j_fu_70;
wire   [7:0] add_ln52_fu_228_p2;
wire    ap_loop_init;
reg   [2:0] i_fu_74;
wire   [2:0] select_ln48_1_fu_216_p3;
reg   [9:0] indvar_flatten_fu_78;
wire   [9:0] add_ln51_fu_179_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln52_fu_202_p2;
wire   [2:0] add_ln51_1_fu_196_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

real_matmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_74 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            i_fu_74 <= select_ln48_1_fu_216_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln51_fu_173_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_78 <= add_ln51_fu_179_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_78 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_70 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            j_fu_70 <= add_ln52_fu_228_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MatA_addr_read_reg_290 <= m_axi_MatA_RDATA;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        select_ln48_reg_281 <= select_ln48_fu_208_p3;
        trunc_ln48_reg_286 <= trunc_ln48_fu_224_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MatA_BRAM_0_ce0 = 1'b1;
    end else begin
        MatA_BRAM_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_286 == 2'd0))) begin
        MatA_BRAM_0_we0 = 1'b1;
    end else begin
        MatA_BRAM_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MatA_BRAM_1_ce0 = 1'b1;
    end else begin
        MatA_BRAM_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_286 == 2'd1))) begin
        MatA_BRAM_1_we0 = 1'b1;
    end else begin
        MatA_BRAM_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MatA_BRAM_2_ce0 = 1'b1;
    end else begin
        MatA_BRAM_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_286 == 2'd2))) begin
        MatA_BRAM_2_we0 = 1'b1;
    end else begin
        MatA_BRAM_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        MatA_BRAM_3_ce0 = 1'b1;
    end else begin
        MatA_BRAM_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln48_reg_286 == 2'd3))) begin
        MatA_BRAM_3_we0 = 1'b1;
    end else begin
        MatA_BRAM_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        MatA_blk_n_R = m_axi_MatA_RVALID;
    end else begin
        MatA_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln51_fu_173_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_78;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_MatA_RREADY = 1'b1;
    end else begin
        m_axi_MatA_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MatA_BRAM_0_address0 = zext_ln52_fu_244_p1;

assign MatA_BRAM_0_d0 = MatA_addr_read_reg_290;

assign MatA_BRAM_1_address0 = zext_ln52_fu_244_p1;

assign MatA_BRAM_1_d0 = MatA_addr_read_reg_290;

assign MatA_BRAM_2_address0 = zext_ln52_fu_244_p1;

assign MatA_BRAM_2_d0 = MatA_addr_read_reg_290;

assign MatA_BRAM_3_address0 = zext_ln52_fu_244_p1;

assign MatA_BRAM_3_d0 = MatA_addr_read_reg_290;

assign add_ln51_1_fu_196_p2 = (i_fu_74 + 3'd1);

assign add_ln51_fu_179_p2 = (ap_sig_allocacmp_indvar_flatten_load + 10'd1);

assign add_ln52_fu_228_p2 = (select_ln48_fu_208_p3 + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_MatA_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_MatA_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (m_axi_MatA_RVALID == 1'b0);
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln51_fu_173_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 10'd600) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_202_p2 = ((j_fu_70 == 8'd150) ? 1'b1 : 1'b0);

assign m_axi_MatA_ARADDR = 64'd0;

assign m_axi_MatA_ARBURST = 2'd0;

assign m_axi_MatA_ARCACHE = 4'd0;

assign m_axi_MatA_ARID = 1'd0;

assign m_axi_MatA_ARLEN = 32'd0;

assign m_axi_MatA_ARLOCK = 2'd0;

assign m_axi_MatA_ARPROT = 3'd0;

assign m_axi_MatA_ARQOS = 4'd0;

assign m_axi_MatA_ARREGION = 4'd0;

assign m_axi_MatA_ARSIZE = 3'd0;

assign m_axi_MatA_ARUSER = 1'd0;

assign m_axi_MatA_ARVALID = 1'b0;

assign m_axi_MatA_AWADDR = 64'd0;

assign m_axi_MatA_AWBURST = 2'd0;

assign m_axi_MatA_AWCACHE = 4'd0;

assign m_axi_MatA_AWID = 1'd0;

assign m_axi_MatA_AWLEN = 32'd0;

assign m_axi_MatA_AWLOCK = 2'd0;

assign m_axi_MatA_AWPROT = 3'd0;

assign m_axi_MatA_AWQOS = 4'd0;

assign m_axi_MatA_AWREGION = 4'd0;

assign m_axi_MatA_AWSIZE = 3'd0;

assign m_axi_MatA_AWUSER = 1'd0;

assign m_axi_MatA_AWVALID = 1'b0;

assign m_axi_MatA_BREADY = 1'b0;

assign m_axi_MatA_WDATA = 16'd0;

assign m_axi_MatA_WID = 1'd0;

assign m_axi_MatA_WLAST = 1'b0;

assign m_axi_MatA_WSTRB = 2'd0;

assign m_axi_MatA_WUSER = 1'd0;

assign m_axi_MatA_WVALID = 1'b0;

assign select_ln48_1_fu_216_p3 = ((icmp_ln52_fu_202_p2[0:0] == 1'b1) ? add_ln51_1_fu_196_p2 : i_fu_74);

assign select_ln48_fu_208_p3 = ((icmp_ln52_fu_202_p2[0:0] == 1'b1) ? 8'd0 : j_fu_70);

assign trunc_ln48_fu_224_p1 = select_ln48_1_fu_216_p3[1:0];

assign zext_ln52_fu_244_p1 = select_ln48_reg_281;

endmodule //real_matmul_LoadMatricesFromDRAMToBRAM_Pipeline_LoadMatAFromDRAMtoBRAM_VITIS_LOOP_52_1
