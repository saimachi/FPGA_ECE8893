// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module real_matmul_LoadMatricesFromBRAMToDRAM_Pipeline_VITIS_LOOP_81_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_MatC_AWVALID,
        m_axi_MatC_AWREADY,
        m_axi_MatC_AWADDR,
        m_axi_MatC_AWID,
        m_axi_MatC_AWLEN,
        m_axi_MatC_AWSIZE,
        m_axi_MatC_AWBURST,
        m_axi_MatC_AWLOCK,
        m_axi_MatC_AWCACHE,
        m_axi_MatC_AWPROT,
        m_axi_MatC_AWQOS,
        m_axi_MatC_AWREGION,
        m_axi_MatC_AWUSER,
        m_axi_MatC_WVALID,
        m_axi_MatC_WREADY,
        m_axi_MatC_WDATA,
        m_axi_MatC_WSTRB,
        m_axi_MatC_WLAST,
        m_axi_MatC_WID,
        m_axi_MatC_WUSER,
        m_axi_MatC_ARVALID,
        m_axi_MatC_ARREADY,
        m_axi_MatC_ARADDR,
        m_axi_MatC_ARID,
        m_axi_MatC_ARLEN,
        m_axi_MatC_ARSIZE,
        m_axi_MatC_ARBURST,
        m_axi_MatC_ARLOCK,
        m_axi_MatC_ARCACHE,
        m_axi_MatC_ARPROT,
        m_axi_MatC_ARQOS,
        m_axi_MatC_ARREGION,
        m_axi_MatC_ARUSER,
        m_axi_MatC_RVALID,
        m_axi_MatC_RREADY,
        m_axi_MatC_RDATA,
        m_axi_MatC_RLAST,
        m_axi_MatC_RID,
        m_axi_MatC_RFIFONUM,
        m_axi_MatC_RUSER,
        m_axi_MatC_RRESP,
        m_axi_MatC_BVALID,
        m_axi_MatC_BREADY,
        m_axi_MatC_BRESP,
        m_axi_MatC_BID,
        m_axi_MatC_BUSER,
        shl_ln,
        zext_ln80,
        MatC_DRAM_load,
        MatC_BRAM_address0,
        MatC_BRAM_ce0,
        MatC_BRAM_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_MatC_AWVALID;
input   m_axi_MatC_AWREADY;
output  [63:0] m_axi_MatC_AWADDR;
output  [0:0] m_axi_MatC_AWID;
output  [31:0] m_axi_MatC_AWLEN;
output  [2:0] m_axi_MatC_AWSIZE;
output  [1:0] m_axi_MatC_AWBURST;
output  [1:0] m_axi_MatC_AWLOCK;
output  [3:0] m_axi_MatC_AWCACHE;
output  [2:0] m_axi_MatC_AWPROT;
output  [3:0] m_axi_MatC_AWQOS;
output  [3:0] m_axi_MatC_AWREGION;
output  [0:0] m_axi_MatC_AWUSER;
output   m_axi_MatC_WVALID;
input   m_axi_MatC_WREADY;
output  [15:0] m_axi_MatC_WDATA;
output  [1:0] m_axi_MatC_WSTRB;
output   m_axi_MatC_WLAST;
output  [0:0] m_axi_MatC_WID;
output  [0:0] m_axi_MatC_WUSER;
output   m_axi_MatC_ARVALID;
input   m_axi_MatC_ARREADY;
output  [63:0] m_axi_MatC_ARADDR;
output  [0:0] m_axi_MatC_ARID;
output  [31:0] m_axi_MatC_ARLEN;
output  [2:0] m_axi_MatC_ARSIZE;
output  [1:0] m_axi_MatC_ARBURST;
output  [1:0] m_axi_MatC_ARLOCK;
output  [3:0] m_axi_MatC_ARCACHE;
output  [2:0] m_axi_MatC_ARPROT;
output  [3:0] m_axi_MatC_ARQOS;
output  [3:0] m_axi_MatC_ARREGION;
output  [0:0] m_axi_MatC_ARUSER;
input   m_axi_MatC_RVALID;
output   m_axi_MatC_RREADY;
input  [15:0] m_axi_MatC_RDATA;
input   m_axi_MatC_RLAST;
input  [0:0] m_axi_MatC_RID;
input  [9:0] m_axi_MatC_RFIFONUM;
input  [0:0] m_axi_MatC_RUSER;
input  [1:0] m_axi_MatC_RRESP;
input   m_axi_MatC_BVALID;
output   m_axi_MatC_BREADY;
input  [1:0] m_axi_MatC_BRESP;
input  [0:0] m_axi_MatC_BID;
input  [0:0] m_axi_MatC_BUSER;
input  [7:0] shl_ln;
input  [8:0] zext_ln80;
input  [63:0] MatC_DRAM_load;
output  [3:0] MatC_BRAM_address0;
output   MatC_BRAM_ce0;
input  [15:0] MatC_BRAM_q0;

reg ap_idle;
reg m_axi_MatC_AWVALID;
reg m_axi_MatC_WVALID;
reg m_axi_MatC_BREADY;
reg MatC_BRAM_ce0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg   [0:0] or_ln80_reg_368;
reg   [0:0] or_ln80_reg_368_pp0_iter3_reg;
reg    ap_block_state5_io;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
reg   [0:0] icmp_ln81_1_reg_377;
reg   [0:0] icmp_ln81_1_reg_377_pp0_iter9_reg;
reg    ap_block_state11_pp0_stage0_iter10;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln80_fu_180_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    MatC_blk_n_W;
wire    ap_block_pp0_stage0;
reg    MatC_blk_n_B;
reg    MatC_blk_n_AW;
reg    ap_block_pp0_stage0_11001;
wire   [16:0] zext_ln80_cast_fu_158_p1;
reg   [16:0] zext_ln80_cast_reg_359;
reg   [0:0] icmp_ln80_reg_364;
wire   [0:0] or_ln80_fu_210_p2;
reg   [0:0] or_ln80_reg_368_pp0_iter1_reg;
reg   [0:0] or_ln80_reg_368_pp0_iter2_reg;
wire   [3:0] add_ln83_fu_252_p2;
reg   [3:0] add_ln83_reg_372;
reg   [3:0] add_ln83_reg_372_pp0_iter1_reg;
reg   [3:0] add_ln83_reg_372_pp0_iter2_reg;
wire   [0:0] icmp_ln81_1_fu_264_p2;
reg   [0:0] icmp_ln81_1_reg_377_pp0_iter1_reg;
reg   [0:0] icmp_ln81_1_reg_377_pp0_iter2_reg;
reg   [0:0] icmp_ln81_1_reg_377_pp0_iter3_reg;
reg   [0:0] icmp_ln81_1_reg_377_pp0_iter4_reg;
reg   [0:0] icmp_ln81_1_reg_377_pp0_iter5_reg;
reg   [0:0] icmp_ln81_1_reg_377_pp0_iter6_reg;
reg   [0:0] icmp_ln81_1_reg_377_pp0_iter7_reg;
reg   [0:0] icmp_ln81_1_reg_377_pp0_iter8_reg;
reg   [63:0] MatC_addr_reg_386;
reg   [15:0] MatC_BRAM_load_reg_397;
reg   [0:0] ap_phi_mux_first_iter_012_phi_fu_150_p4;
wire    ap_loop_init;
wire   [63:0] zext_ln83_1_fu_307_p1;
wire  signed [63:0] sext_ln80_fu_303_p1;
reg    ap_block_pp0_stage0_01001;
reg   [2:0] j_fu_84;
wire   [2:0] add_ln81_fu_258_p2;
reg   [2:0] ap_sig_allocacmp_j_load;
reg   [2:0] i_fu_88;
wire   [2:0] select_ln80_1_fu_224_p3;
reg   [2:0] ap_sig_allocacmp_i_load;
reg   [4:0] indvar_flatten_fu_92;
wire   [4:0] add_ln80_4_fu_186_p2;
reg   [4:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln81_fu_204_p2;
wire   [2:0] add_ln80_fu_198_p2;
wire   [1:0] trunc_ln83_fu_232_p1;
wire   [2:0] select_ln80_fu_216_p3;
wire   [3:0] tmp_s_fu_236_p3;
wire   [3:0] zext_ln83_fu_248_p1;
wire   [16:0] grp_fu_323_p4;
wire   [63:0] zext_ln80_3_fu_285_p1;
wire   [63:0] add_ln80_3_fu_288_p2;
wire   [62:0] sext_ln81_mid2_v_fu_293_p4;
wire   [2:0] grp_fu_323_p1;
wire   [8:0] grp_fu_323_p2;
wire   [8:0] grp_fu_323_p3;
reg    grp_fu_323_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [7:0] grp_fu_323_p10;
reg    ap_condition_432;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_done_reg = 1'b0;
end

real_matmul_ama_addmuladd_8ns_3ns_9ns_9ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 3 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 9 ),
    .dout_WIDTH( 17 ))
ama_addmuladd_8ns_3ns_9ns_9ns_17_4_1_U1850(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(shl_ln),
    .din1(grp_fu_323_p1),
    .din2(grp_fu_323_p2),
    .din3(grp_fu_323_p3),
    .ce(grp_fu_323_ce),
    .dout(grp_fu_323_p4)
);

real_matmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln80_fu_180_p2 == 1'd0))) begin
            i_fu_88 <= select_ln80_1_fu_224_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_88 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln80_fu_180_p2 == 1'd0))) begin
            indvar_flatten_fu_92 <= add_ln80_4_fu_186_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_92 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln80_fu_180_p2 == 1'd0))) begin
            j_fu_84 <= add_ln81_fu_258_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_84 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        MatC_BRAM_load_reg_397 <= MatC_BRAM_q0;
        add_ln83_reg_372_pp0_iter2_reg <= add_ln83_reg_372_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln81_1_reg_377_pp0_iter2_reg <= icmp_ln81_1_reg_377_pp0_iter1_reg;
        icmp_ln81_1_reg_377_pp0_iter3_reg <= icmp_ln81_1_reg_377_pp0_iter2_reg;
        icmp_ln81_1_reg_377_pp0_iter4_reg <= icmp_ln81_1_reg_377_pp0_iter3_reg;
        icmp_ln81_1_reg_377_pp0_iter5_reg <= icmp_ln81_1_reg_377_pp0_iter4_reg;
        icmp_ln81_1_reg_377_pp0_iter6_reg <= icmp_ln81_1_reg_377_pp0_iter5_reg;
        icmp_ln81_1_reg_377_pp0_iter7_reg <= icmp_ln81_1_reg_377_pp0_iter6_reg;
        icmp_ln81_1_reg_377_pp0_iter8_reg <= icmp_ln81_1_reg_377_pp0_iter7_reg;
        icmp_ln81_1_reg_377_pp0_iter9_reg <= icmp_ln81_1_reg_377_pp0_iter8_reg;
        or_ln80_reg_368_pp0_iter2_reg <= or_ln80_reg_368_pp0_iter1_reg;
        or_ln80_reg_368_pp0_iter3_reg <= or_ln80_reg_368_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((or_ln80_reg_368_pp0_iter2_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatC_addr_reg_386 <= sext_ln80_fu_303_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln80_fu_180_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln83_reg_372 <= add_ln83_fu_252_p2;
        icmp_ln81_1_reg_377 <= icmp_ln81_1_fu_264_p2;
        or_ln80_reg_368 <= or_ln80_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln83_reg_372_pp0_iter1_reg <= add_ln83_reg_372;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln80_reg_364 <= icmp_ln80_fu_180_p2;
        icmp_ln81_1_reg_377_pp0_iter1_reg <= icmp_ln81_1_reg_377;
        or_ln80_reg_368_pp0_iter1_reg <= or_ln80_reg_368;
        zext_ln80_cast_reg_359[8 : 0] <= zext_ln80_cast_fu_158_p1[8 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatC_BRAM_ce0 = 1'b1;
    end else begin
        MatC_BRAM_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln80_reg_368_pp0_iter3_reg == 1'd1))) begin
        MatC_blk_n_AW = m_axi_MatC_AWREADY;
    end else begin
        MatC_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (icmp_ln81_1_reg_377_pp0_iter9_reg == 1'd1))) begin
        MatC_blk_n_B = m_axi_MatC_BVALID;
    end else begin
        MatC_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        MatC_blk_n_W = m_axi_MatC_WREADY;
    end else begin
        MatC_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln80_fu_180_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter9_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_first_iter_012_phi_fu_150_p4 = 1'd1;
        end else if ((1'b1 == ap_condition_432)) begin
            ap_phi_mux_first_iter_012_phi_fu_150_p4 = 1'd0;
        end else begin
            ap_phi_mux_first_iter_012_phi_fu_150_p4 = 1'd1;
        end
    end else begin
        ap_phi_mux_first_iter_012_phi_fu_150_p4 = 1'd1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 3'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_88;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten_load = 5'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_92;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 3'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_84;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_323_ce = 1'b1;
    end else begin
        grp_fu_323_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln80_reg_368_pp0_iter3_reg == 1'd1))) begin
        m_axi_MatC_AWVALID = 1'b1;
    end else begin
        m_axi_MatC_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln81_1_reg_377_pp0_iter9_reg == 1'd1))) begin
        m_axi_MatC_BREADY = 1'b1;
    end else begin
        m_axi_MatC_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_MatC_WVALID = 1'b1;
    end else begin
        m_axi_MatC_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MatC_BRAM_address0 = zext_ln83_1_fu_307_p1;

assign add_ln80_3_fu_288_p2 = (zext_ln80_3_fu_285_p1 + MatC_DRAM_load);

assign add_ln80_4_fu_186_p2 = (ap_sig_allocacmp_indvar_flatten_load + 5'd1);

assign add_ln80_fu_198_p2 = (ap_sig_allocacmp_i_load + 3'd1);

assign add_ln81_fu_258_p2 = (select_ln80_fu_216_p3 + 3'd1);

assign add_ln83_fu_252_p2 = (tmp_s_fu_236_p3 + zext_ln83_fu_248_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln81_1_reg_377_pp0_iter9_reg == 1'd1) & (m_axi_MatC_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln81_1_reg_377_pp0_iter9_reg == 1'd1) & (m_axi_MatC_BVALID == 1'b0)) | ((m_axi_MatC_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter10 == 1'b1) & (icmp_ln81_1_reg_377_pp0_iter9_reg == 1'd1) & (m_axi_MatC_BVALID == 1'b0)) | ((m_axi_MatC_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state5_io)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_pp0_stage0_iter10 = ((icmp_ln81_1_reg_377_pp0_iter9_reg == 1'd1) & (m_axi_MatC_BVALID == 1'b0));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((m_axi_MatC_AWREADY == 1'b0) & (or_ln80_reg_368_pp0_iter3_reg == 1'd1));
end

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_432 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln80_reg_364 == 1'd0) & (1'b0 == ap_block_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_323_p1 = grp_fu_323_p10;

assign grp_fu_323_p10 = select_ln80_1_fu_224_p3;

assign grp_fu_323_p2 = 17'd400;

assign grp_fu_323_p3 = zext_ln80_cast_reg_359;

assign icmp_ln80_fu_180_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln81_1_fu_264_p2 = ((add_ln81_fu_258_p2 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln81_fu_204_p2 = ((ap_sig_allocacmp_j_load == 3'd4) ? 1'b1 : 1'b0);

assign m_axi_MatC_ARADDR = 64'd0;

assign m_axi_MatC_ARBURST = 2'd0;

assign m_axi_MatC_ARCACHE = 4'd0;

assign m_axi_MatC_ARID = 1'd0;

assign m_axi_MatC_ARLEN = 32'd0;

assign m_axi_MatC_ARLOCK = 2'd0;

assign m_axi_MatC_ARPROT = 3'd0;

assign m_axi_MatC_ARQOS = 4'd0;

assign m_axi_MatC_ARREGION = 4'd0;

assign m_axi_MatC_ARSIZE = 3'd0;

assign m_axi_MatC_ARUSER = 1'd0;

assign m_axi_MatC_ARVALID = 1'b0;

assign m_axi_MatC_AWADDR = MatC_addr_reg_386;

assign m_axi_MatC_AWBURST = 2'd0;

assign m_axi_MatC_AWCACHE = 4'd0;

assign m_axi_MatC_AWID = 1'd0;

assign m_axi_MatC_AWLEN = 32'd4;

assign m_axi_MatC_AWLOCK = 2'd0;

assign m_axi_MatC_AWPROT = 3'd0;

assign m_axi_MatC_AWQOS = 4'd0;

assign m_axi_MatC_AWREGION = 4'd0;

assign m_axi_MatC_AWSIZE = 3'd0;

assign m_axi_MatC_AWUSER = 1'd0;

assign m_axi_MatC_RREADY = 1'b0;

assign m_axi_MatC_WDATA = MatC_BRAM_load_reg_397;

assign m_axi_MatC_WID = 1'd0;

assign m_axi_MatC_WLAST = 1'b0;

assign m_axi_MatC_WSTRB = 2'd3;

assign m_axi_MatC_WUSER = 1'd0;

assign or_ln80_fu_210_p2 = (icmp_ln81_fu_204_p2 | ap_phi_mux_first_iter_012_phi_fu_150_p4);

assign select_ln80_1_fu_224_p3 = ((icmp_ln81_fu_204_p2[0:0] == 1'b1) ? add_ln80_fu_198_p2 : ap_sig_allocacmp_i_load);

assign select_ln80_fu_216_p3 = ((icmp_ln81_fu_204_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_j_load);

assign sext_ln80_fu_303_p1 = $signed(sext_ln81_mid2_v_fu_293_p4);

assign sext_ln81_mid2_v_fu_293_p4 = {{add_ln80_3_fu_288_p2[63:1]}};

assign tmp_s_fu_236_p3 = {{trunc_ln83_fu_232_p1}, {2'd0}};

assign trunc_ln83_fu_232_p1 = select_ln80_1_fu_224_p3[1:0];

assign zext_ln80_3_fu_285_p1 = grp_fu_323_p4;

assign zext_ln80_cast_fu_158_p1 = zext_ln80;

assign zext_ln83_1_fu_307_p1 = add_ln83_reg_372_pp0_iter2_reg;

assign zext_ln83_fu_248_p1 = select_ln80_fu_216_p3;

always @ (posedge ap_clk) begin
    zext_ln80_cast_reg_359[16:9] <= 8'b00000000;
end

endmodule //real_matmul_LoadMatricesFromBRAMToDRAM_Pipeline_VITIS_LOOP_81_1
