// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module real_matmul_LoadMatricesFromDRAMToBRAM_Pipeline_LoadMatBFromDRAMtoBRAM_VITIS_LOOP_59_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_MatB_AWVALID,
        m_axi_MatB_AWREADY,
        m_axi_MatB_AWADDR,
        m_axi_MatB_AWID,
        m_axi_MatB_AWLEN,
        m_axi_MatB_AWSIZE,
        m_axi_MatB_AWBURST,
        m_axi_MatB_AWLOCK,
        m_axi_MatB_AWCACHE,
        m_axi_MatB_AWPROT,
        m_axi_MatB_AWQOS,
        m_axi_MatB_AWREGION,
        m_axi_MatB_AWUSER,
        m_axi_MatB_WVALID,
        m_axi_MatB_WREADY,
        m_axi_MatB_WDATA,
        m_axi_MatB_WSTRB,
        m_axi_MatB_WLAST,
        m_axi_MatB_WID,
        m_axi_MatB_WUSER,
        m_axi_MatB_ARVALID,
        m_axi_MatB_ARREADY,
        m_axi_MatB_ARADDR,
        m_axi_MatB_ARID,
        m_axi_MatB_ARLEN,
        m_axi_MatB_ARSIZE,
        m_axi_MatB_ARBURST,
        m_axi_MatB_ARLOCK,
        m_axi_MatB_ARCACHE,
        m_axi_MatB_ARPROT,
        m_axi_MatB_ARQOS,
        m_axi_MatB_ARREGION,
        m_axi_MatB_ARUSER,
        m_axi_MatB_RVALID,
        m_axi_MatB_RREADY,
        m_axi_MatB_RDATA,
        m_axi_MatB_RLAST,
        m_axi_MatB_RID,
        m_axi_MatB_RFIFONUM,
        m_axi_MatB_RUSER,
        m_axi_MatB_RRESP,
        m_axi_MatB_BVALID,
        m_axi_MatB_BREADY,
        m_axi_MatB_BRESP,
        m_axi_MatB_BID,
        m_axi_MatB_BUSER,
        MatB_BRAM_3_address0,
        MatB_BRAM_3_ce0,
        MatB_BRAM_3_we0,
        MatB_BRAM_3_d0,
        MatB_BRAM_2_address0,
        MatB_BRAM_2_ce0,
        MatB_BRAM_2_we0,
        MatB_BRAM_2_d0,
        MatB_BRAM_1_address0,
        MatB_BRAM_1_ce0,
        MatB_BRAM_1_we0,
        MatB_BRAM_1_d0,
        MatB_BRAM_0_address0,
        MatB_BRAM_0_ce0,
        MatB_BRAM_0_we0,
        MatB_BRAM_0_d0,
        rem_cast,
        MatB_DRAM
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_MatB_AWVALID;
input   m_axi_MatB_AWREADY;
output  [63:0] m_axi_MatB_AWADDR;
output  [0:0] m_axi_MatB_AWID;
output  [31:0] m_axi_MatB_AWLEN;
output  [2:0] m_axi_MatB_AWSIZE;
output  [1:0] m_axi_MatB_AWBURST;
output  [1:0] m_axi_MatB_AWLOCK;
output  [3:0] m_axi_MatB_AWCACHE;
output  [2:0] m_axi_MatB_AWPROT;
output  [3:0] m_axi_MatB_AWQOS;
output  [3:0] m_axi_MatB_AWREGION;
output  [0:0] m_axi_MatB_AWUSER;
output   m_axi_MatB_WVALID;
input   m_axi_MatB_WREADY;
output  [15:0] m_axi_MatB_WDATA;
output  [1:0] m_axi_MatB_WSTRB;
output   m_axi_MatB_WLAST;
output  [0:0] m_axi_MatB_WID;
output  [0:0] m_axi_MatB_WUSER;
output   m_axi_MatB_ARVALID;
input   m_axi_MatB_ARREADY;
output  [63:0] m_axi_MatB_ARADDR;
output  [0:0] m_axi_MatB_ARID;
output  [31:0] m_axi_MatB_ARLEN;
output  [2:0] m_axi_MatB_ARSIZE;
output  [1:0] m_axi_MatB_ARBURST;
output  [1:0] m_axi_MatB_ARLOCK;
output  [3:0] m_axi_MatB_ARCACHE;
output  [2:0] m_axi_MatB_ARPROT;
output  [3:0] m_axi_MatB_ARQOS;
output  [3:0] m_axi_MatB_ARREGION;
output  [0:0] m_axi_MatB_ARUSER;
input   m_axi_MatB_RVALID;
output   m_axi_MatB_RREADY;
input  [15:0] m_axi_MatB_RDATA;
input   m_axi_MatB_RLAST;
input  [0:0] m_axi_MatB_RID;
input  [9:0] m_axi_MatB_RFIFONUM;
input  [0:0] m_axi_MatB_RUSER;
input  [1:0] m_axi_MatB_RRESP;
input   m_axi_MatB_BVALID;
output   m_axi_MatB_BREADY;
input  [1:0] m_axi_MatB_BRESP;
input  [0:0] m_axi_MatB_BID;
input  [0:0] m_axi_MatB_BUSER;
output  [7:0] MatB_BRAM_3_address0;
output   MatB_BRAM_3_ce0;
output   MatB_BRAM_3_we0;
output  [15:0] MatB_BRAM_3_d0;
output  [7:0] MatB_BRAM_2_address0;
output   MatB_BRAM_2_ce0;
output   MatB_BRAM_2_we0;
output  [15:0] MatB_BRAM_2_d0;
output  [7:0] MatB_BRAM_1_address0;
output   MatB_BRAM_1_ce0;
output   MatB_BRAM_1_we0;
output  [15:0] MatB_BRAM_1_d0;
output  [7:0] MatB_BRAM_0_address0;
output   MatB_BRAM_0_ce0;
output   MatB_BRAM_0_we0;
output  [15:0] MatB_BRAM_0_d0;
input  [5:0] rem_cast;
input  [63:0] MatB_DRAM;

reg ap_idle;
reg m_axi_MatB_ARVALID;
reg m_axi_MatB_RREADY;
reg MatB_BRAM_3_ce0;
reg MatB_BRAM_3_we0;
reg MatB_BRAM_2_ce0;
reg MatB_BRAM_2_we0;
reg MatB_BRAM_1_ce0;
reg MatB_BRAM_1_we0;
reg MatB_BRAM_0_ce0;
reg MatB_BRAM_0_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
reg    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln58_fu_192_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    MatB_blk_n_AR;
wire    ap_block_pp0_stage0;
reg    MatB_blk_n_R;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln59_fu_207_p2;
reg   [0:0] icmp_ln59_reg_358;
reg   [0:0] icmp_ln59_reg_358_pp0_iter1_reg;
wire   [7:0] select_ln48_fu_213_p3;
reg   [7:0] select_ln48_reg_363;
reg   [7:0] select_ln48_reg_363_pp0_iter1_reg;
reg   [7:0] select_ln48_reg_363_pp0_iter2_reg;
reg   [7:0] select_ln48_reg_363_pp0_iter3_reg;
reg   [7:0] select_ln48_reg_363_pp0_iter4_reg;
reg   [7:0] select_ln48_reg_363_pp0_iter5_reg;
reg   [7:0] select_ln48_reg_363_pp0_iter6_reg;
reg   [7:0] select_ln48_reg_363_pp0_iter7_reg;
reg   [7:0] select_ln48_reg_363_pp0_iter8_reg;
reg   [7:0] select_ln48_reg_363_pp0_iter9_reg;
reg   [7:0] select_ln48_reg_363_pp0_iter10_reg;
reg   [7:0] select_ln48_reg_363_pp0_iter11_reg;
reg   [7:0] select_ln48_reg_363_pp0_iter12_reg;
wire   [1:0] trunc_ln48_fu_257_p1;
reg   [1:0] trunc_ln48_reg_373;
reg   [1:0] trunc_ln48_reg_373_pp0_iter3_reg;
reg   [1:0] trunc_ln48_reg_373_pp0_iter4_reg;
reg   [1:0] trunc_ln48_reg_373_pp0_iter5_reg;
reg   [1:0] trunc_ln48_reg_373_pp0_iter6_reg;
reg   [1:0] trunc_ln48_reg_373_pp0_iter7_reg;
reg   [1:0] trunc_ln48_reg_373_pp0_iter8_reg;
reg   [1:0] trunc_ln48_reg_373_pp0_iter9_reg;
reg   [1:0] trunc_ln48_reg_373_pp0_iter10_reg;
reg   [1:0] trunc_ln48_reg_373_pp0_iter11_reg;
reg   [1:0] trunc_ln48_reg_373_pp0_iter12_reg;
reg   [63:0] MatB_addr_reg_382;
reg   [15:0] MatB_addr_read_reg_388;
wire   [63:0] zext_ln59_fu_307_p1;
wire  signed [63:0] sext_ln61_fu_297_p1;
reg   [7:0] j_fu_86;
wire   [7:0] add_ln59_fu_225_p2;
wire    ap_loop_init;
reg   [7:0] ap_sig_allocacmp_j_load;
reg   [2:0] i_1_fu_90;
wire   [2:0] select_ln48_1_fu_250_p3;
reg   [9:0] indvar_flatten6_fu_94;
wire   [9:0] add_ln58_1_fu_198_p2;
reg   [9:0] ap_sig_allocacmp_indvar_flatten6_load;
wire   [2:0] add_ln58_fu_244_p2;
wire   [8:0] shl_ln1_fu_261_p4;
wire   [15:0] grp_fu_314_p3;
wire   [63:0] zext_ln61_2_fu_279_p1;
wire   [63:0] add_ln61_1_fu_282_p2;
wire   [62:0] trunc_ln2_fu_287_p4;
wire   [7:0] grp_fu_314_p0;
wire   [8:0] grp_fu_314_p1;
wire   [8:0] grp_fu_314_p2;
reg    grp_fu_314_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [15:0] grp_fu_314_p00;
wire   [15:0] grp_fu_314_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_done_reg = 1'b0;
end

real_matmul_mac_muladd_8ns_9ns_9ns_16_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .dout_WIDTH( 16 ))
mac_muladd_8ns_9ns_9ns_16_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_314_p0),
    .din1(grp_fu_314_p1),
    .din2(grp_fu_314_p2),
    .ce(grp_fu_314_ce),
    .dout(grp_fu_314_p3)
);

real_matmul_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_1_fu_90 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i_1_fu_90 <= select_ln48_1_fu_250_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln58_fu_192_p2 == 1'd0))) begin
            indvar_flatten6_fu_94 <= add_ln58_1_fu_198_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_94 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln58_fu_192_p2 == 1'd0))) begin
            j_fu_86 <= add_ln59_fu_225_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_86 <= 8'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        MatB_addr_read_reg_388 <= m_axi_MatB_RDATA;
        MatB_addr_reg_382 <= sext_ln61_fu_297_p1;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        select_ln48_reg_363_pp0_iter10_reg <= select_ln48_reg_363_pp0_iter9_reg;
        select_ln48_reg_363_pp0_iter11_reg <= select_ln48_reg_363_pp0_iter10_reg;
        select_ln48_reg_363_pp0_iter12_reg <= select_ln48_reg_363_pp0_iter11_reg;
        select_ln48_reg_363_pp0_iter2_reg <= select_ln48_reg_363_pp0_iter1_reg;
        select_ln48_reg_363_pp0_iter3_reg <= select_ln48_reg_363_pp0_iter2_reg;
        select_ln48_reg_363_pp0_iter4_reg <= select_ln48_reg_363_pp0_iter3_reg;
        select_ln48_reg_363_pp0_iter5_reg <= select_ln48_reg_363_pp0_iter4_reg;
        select_ln48_reg_363_pp0_iter6_reg <= select_ln48_reg_363_pp0_iter5_reg;
        select_ln48_reg_363_pp0_iter7_reg <= select_ln48_reg_363_pp0_iter6_reg;
        select_ln48_reg_363_pp0_iter8_reg <= select_ln48_reg_363_pp0_iter7_reg;
        select_ln48_reg_363_pp0_iter9_reg <= select_ln48_reg_363_pp0_iter8_reg;
        trunc_ln48_reg_373 <= trunc_ln48_fu_257_p1;
        trunc_ln48_reg_373_pp0_iter10_reg <= trunc_ln48_reg_373_pp0_iter9_reg;
        trunc_ln48_reg_373_pp0_iter11_reg <= trunc_ln48_reg_373_pp0_iter10_reg;
        trunc_ln48_reg_373_pp0_iter12_reg <= trunc_ln48_reg_373_pp0_iter11_reg;
        trunc_ln48_reg_373_pp0_iter3_reg <= trunc_ln48_reg_373;
        trunc_ln48_reg_373_pp0_iter4_reg <= trunc_ln48_reg_373_pp0_iter3_reg;
        trunc_ln48_reg_373_pp0_iter5_reg <= trunc_ln48_reg_373_pp0_iter4_reg;
        trunc_ln48_reg_373_pp0_iter6_reg <= trunc_ln48_reg_373_pp0_iter5_reg;
        trunc_ln48_reg_373_pp0_iter7_reg <= trunc_ln48_reg_373_pp0_iter6_reg;
        trunc_ln48_reg_373_pp0_iter8_reg <= trunc_ln48_reg_373_pp0_iter7_reg;
        trunc_ln48_reg_373_pp0_iter9_reg <= trunc_ln48_reg_373_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln59_reg_358_pp0_iter1_reg <= icmp_ln59_reg_358;
        select_ln48_reg_363_pp0_iter1_reg <= select_ln48_reg_363;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln58_fu_192_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln59_reg_358 <= icmp_ln59_fu_207_p2;
        select_ln48_reg_363 <= select_ln48_fu_213_p3;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_BRAM_0_ce0 = 1'b1;
    end else begin
        MatB_BRAM_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (trunc_ln48_reg_373_pp0_iter12_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_BRAM_0_we0 = 1'b1;
    end else begin
        MatB_BRAM_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_BRAM_1_ce0 = 1'b1;
    end else begin
        MatB_BRAM_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (trunc_ln48_reg_373_pp0_iter12_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_BRAM_1_we0 = 1'b1;
    end else begin
        MatB_BRAM_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_BRAM_2_ce0 = 1'b1;
    end else begin
        MatB_BRAM_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (trunc_ln48_reg_373_pp0_iter12_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_BRAM_2_we0 = 1'b1;
    end else begin
        MatB_BRAM_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_BRAM_3_ce0 = 1'b1;
    end else begin
        MatB_BRAM_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (trunc_ln48_reg_373_pp0_iter12_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        MatB_BRAM_3_we0 = 1'b1;
    end else begin
        MatB_BRAM_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        MatB_blk_n_AR = m_axi_MatB_ARREADY;
    end else begin
        MatB_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        MatB_blk_n_R = m_axi_MatB_RVALID;
    end else begin
        MatB_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln58_fu_192_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter12_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 10'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_94;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 8'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_86;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_314_ce = 1'b1;
    end else begin
        grp_fu_314_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_MatB_ARVALID = 1'b1;
    end else begin
        m_axi_MatB_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_MatB_RREADY = 1'b1;
    end else begin
        m_axi_MatB_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign MatB_BRAM_0_address0 = zext_ln59_fu_307_p1;

assign MatB_BRAM_0_d0 = MatB_addr_read_reg_388;

assign MatB_BRAM_1_address0 = zext_ln59_fu_307_p1;

assign MatB_BRAM_1_d0 = MatB_addr_read_reg_388;

assign MatB_BRAM_2_address0 = zext_ln59_fu_307_p1;

assign MatB_BRAM_2_d0 = MatB_addr_read_reg_388;

assign MatB_BRAM_3_address0 = zext_ln59_fu_307_p1;

assign MatB_BRAM_3_d0 = MatB_addr_read_reg_388;

assign add_ln58_1_fu_198_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 10'd1);

assign add_ln58_fu_244_p2 = (i_1_fu_90 + 3'd1);

assign add_ln59_fu_225_p2 = (select_ln48_fu_213_p3 + 8'd1);

assign add_ln61_1_fu_282_p2 = (zext_ln61_2_fu_279_p1 + MatB_DRAM);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter12 == 1'b1) & (m_axi_MatB_RVALID == 1'b0)) | ((m_axi_MatB_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter12 == 1'b1) & (m_axi_MatB_RVALID == 1'b0)) | ((m_axi_MatB_ARREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_pp0_stage0_iter12 = (m_axi_MatB_RVALID == 1'b0);
end

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_314_p0 = grp_fu_314_p00;

assign grp_fu_314_p00 = select_ln48_fu_213_p3;

assign grp_fu_314_p1 = 16'd400;

assign grp_fu_314_p2 = grp_fu_314_p20;

assign grp_fu_314_p20 = shl_ln1_fu_261_p4;

assign icmp_ln58_fu_192_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 10'd600) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_207_p2 = ((ap_sig_allocacmp_j_load == 8'd150) ? 1'b1 : 1'b0);

assign m_axi_MatB_ARADDR = MatB_addr_reg_382;

assign m_axi_MatB_ARBURST = 2'd0;

assign m_axi_MatB_ARCACHE = 4'd0;

assign m_axi_MatB_ARID = 1'd0;

assign m_axi_MatB_ARLEN = 32'd1;

assign m_axi_MatB_ARLOCK = 2'd0;

assign m_axi_MatB_ARPROT = 3'd0;

assign m_axi_MatB_ARQOS = 4'd0;

assign m_axi_MatB_ARREGION = 4'd0;

assign m_axi_MatB_ARSIZE = 3'd0;

assign m_axi_MatB_ARUSER = 1'd0;

assign m_axi_MatB_AWADDR = 64'd0;

assign m_axi_MatB_AWBURST = 2'd0;

assign m_axi_MatB_AWCACHE = 4'd0;

assign m_axi_MatB_AWID = 1'd0;

assign m_axi_MatB_AWLEN = 32'd0;

assign m_axi_MatB_AWLOCK = 2'd0;

assign m_axi_MatB_AWPROT = 3'd0;

assign m_axi_MatB_AWQOS = 4'd0;

assign m_axi_MatB_AWREGION = 4'd0;

assign m_axi_MatB_AWSIZE = 3'd0;

assign m_axi_MatB_AWUSER = 1'd0;

assign m_axi_MatB_AWVALID = 1'b0;

assign m_axi_MatB_BREADY = 1'b0;

assign m_axi_MatB_WDATA = 16'd0;

assign m_axi_MatB_WID = 1'd0;

assign m_axi_MatB_WLAST = 1'b0;

assign m_axi_MatB_WSTRB = 2'd0;

assign m_axi_MatB_WUSER = 1'd0;

assign m_axi_MatB_WVALID = 1'b0;

assign select_ln48_1_fu_250_p3 = ((icmp_ln59_reg_358_pp0_iter1_reg[0:0] == 1'b1) ? add_ln58_fu_244_p2 : i_1_fu_90);

assign select_ln48_fu_213_p3 = ((icmp_ln59_fu_207_p2[0:0] == 1'b1) ? 8'd0 : ap_sig_allocacmp_j_load);

assign sext_ln61_fu_297_p1 = $signed(trunc_ln2_fu_287_p4);

assign shl_ln1_fu_261_p4 = {{{rem_cast}, {trunc_ln48_fu_257_p1}}, {1'd0}};

assign trunc_ln2_fu_287_p4 = {{add_ln61_1_fu_282_p2[63:1]}};

assign trunc_ln48_fu_257_p1 = select_ln48_1_fu_250_p3[1:0];

assign zext_ln59_fu_307_p1 = select_ln48_reg_363_pp0_iter12_reg;

assign zext_ln61_2_fu_279_p1 = grp_fu_314_p3;

endmodule //real_matmul_LoadMatricesFromDRAMToBRAM_Pipeline_LoadMatBFromDRAMtoBRAM_VITIS_LOOP_59_2
